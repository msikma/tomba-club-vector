@charset "utf-8";

// Mixin for border radiuses
//
// $amount can be 'xl', 'l', 'm', 's'.
//
// $corners needs to be a list with any of 'tl', 'tr', 'bl', 'br',
// in any order. For example, ('tl', 'tr'), which would apply the
// border radius only to the top left and top right corners.
//
@mixin border-radius($amount:'m', $corners:('tl', 'tr', 'bl', 'br')) {
  // If the $amount variable is a string, check if we have a variable
  // with a standardized radius size.
  $radius: 0;
  $radiuses: (
    s: $border-radius-s,
    m: $border-radius-m,
    l: $border-radius-l,
    xl: $border-radius-xl,
  );
  $amount-val: map-get($radiuses, $amount);

  // Either take our standard value or use whatever was passed to $amount.
  @if ($amount-val != null) {
    $radius: $amount-val;
  }
  @else {
    $radius: $amount;
  }

  // Reset the border radius first.
  border-radius: 0;

  // Loop through the $corners argument.
  $i: length($corners);
  $cmap: (
    tl: border-top-left-radius,
    tr: border-top-right-radius,
    bl: border-bottom-left-radius,
    br: border-bottom-right-radius,
  );
  @while $i > 0 {
    $corner: nth($corners, $i);
    $attr: map-get($cmap, $corner);
    #{$attr}: $radius;
    $i: $i - 1;
  }
}

// Universal basic table styling
@mixin table-universal() {
  border-collapse: separate;
  border-spacing: 0;
  background: transparent;

  thead, tbody, tfoot {
    tr {
      th, td {
        line-height: 1.5;
        padding: 0.45em 0.5em 0.35em;
        border-style: solid;
        border-width: 0;
        border-left-width: 1px;
        border-top-width: 1px;
      }
      th {
        font-weight: 700;
      }
      td {
        background: #f8f9fa;
      }
      th:last-child, td:last-child {
        border-right-width: 1px;
      }
    }
  }
  thead:last-child, tbody:last-child, tfoot:last-child {
    // Account for rowspan; cells that span to the bottom would otherwise
    // not get the bottom border. There doesn't seem to be a way to
    // do this "properly", so we'll only do this for a few levels deep.
    @for $i from 2 through 5 {
      tr:nth-last-child(#{$i}) {
        td, th {
          &[rowspan="#{$i}"] {
            border-bottom-width: 1px;
          }
        }
      }
    }
    tr:last-child {
      th, td {
        border-bottom-width: 1px;
      }
    }
  }
}

// Add rounding to a table (regardless of its structure)
@mixin table-rounded($amount:'m') {
  // If the <thead> et al. elements are not the first
  // then they must be followed by either a <caption> or a <colgroup>.
  // Otherwise, the table is invalid HTML.
  thead:first-child, tbody:first-child, tfoot:first-child,
  caption + thead, caption + tbody, caption + tfoot,
  colgroup + thead, colgroup + tbody, colgroup + tfoot {
    tr:first-child {
      th:first-child, td:first-child {
        @include border-radius($amount, ('tl'));
      }
      th:last-child, td:last-child {
        @include border-radius($amount, ('tr'));
      }
    }
  }
  thead:last-child, tbody:last-child, tfoot:last-child {
    tr:last-child {
      th:first-child, td:first-child {
        @include border-radius($amount, ('bl'));
      }
      th:last-child, td:last-child {
        @include border-radius($amount, ('br'));
      }
    }
    @for $i from 2 through 5 {
      tr:nth-last-child(#{$i}) {
        th:first-child, td:first-child {
          &[rowspan="#{$i}"] {
            @include border-radius($amount, ('bl'));
          }
        }
        th:last-child, td:last-child {
          &[rowspan="#{$i}"] {
            @include border-radius($amount, ('br'));
          }
        }
      }
    }
  }
}
